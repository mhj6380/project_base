import { Board, BoardContent, Comment, CommentLike, Like, Scrap } from "./entities/board.entity";
import { Repository } from "typeorm";
import { CreateBoardContentDTO } from "./dto/create-board.dto";
import { UpdateBoardContentDTO } from "./dto/update-board.dto";
import { CreateCommentDTO, UpdateCommentDTO } from "./dto/comment.dto";
import { CreateCommentLikeDTO, CreateLikeDTO } from "./dto/like.dto";
import { CreateScrapDTO } from "./dto/scrap.dto";
import { IResponse } from "src/interface/response.interface";
import { ContentTemplate } from "./entities/template.entity";
import { CreateBoardDTO, UpdateBoardDTO } from "./dto/board.dto";
export declare class BoardService {
    private readonly boardRepository;
    private readonly boardContentRepository;
    private readonly commentRepository;
    private readonly likeRepository;
    private readonly commentLikeRepository;
    private readonly scrapRepository;
    private readonly contentTemplateRepository;
    constructor(boardRepository: Repository<Board>, boardContentRepository: Repository<BoardContent>, commentRepository: Repository<Comment>, likeRepository: Repository<Like>, commentLikeRepository: Repository<CommentLike>, scrapRepository: Repository<Scrap>, contentTemplateRepository: Repository<ContentTemplate>);
    getFeedList(page: number, limit: number): Promise<BoardContent[]>;
    getPersnalFeedList(userId: number, page: number, limit: number): Promise<BoardContent[]>;
    getOneBoardContent(contentKey: string): Promise<BoardContent>;
    getBoardInitList(pkgname: any): Promise<any[]>;
    getBoardGroup(topic: any, page: any, limit: any): Promise<Board>;
    getComments(contentKey: string): Promise<Comment[]>;
    getCommentChildrens(parentCommentKey: any): Promise<Comment[]>;
    createBoard(boardData: CreateBoardDTO): Promise<Board>;
    createBoardContent(body: CreateBoardContentDTO): Promise<IResponse>;
    updateBoard(updateData: UpdateBoardDTO): Promise<void>;
    updateBoardContent(updateData: UpdateBoardContentDTO): Promise<void>;
    getOneBoard(boardKey: string): Promise<Board>;
    deleteBoard(boardKey: string): Promise<any>;
    deleteBoardContent(contentKey: string): Promise<any>;
    createComment(commentData: CreateCommentDTO, pkgname: string): Promise<IResponse>;
    updateComment(updateData: UpdateCommentDTO): Promise<IResponse>;
    deleteComment(commentKey: string): Promise<IResponse>;
    getBoardList(boardKey: string, page: number, limit: number, pkgname: string, sort: number, orderBy: "ASC" | "DESC", showReserve: boolean, searchText?: string): Promise<any>;
    incrementViewCount(id: number): Promise<void>;
    actionLike(likeData: CreateLikeDTO): Promise<any>;
    likeComment(likeData: CreateCommentLikeDTO): Promise<any>;
    actionScrap(scrapData: CreateScrapDTO): Promise<boolean>;
    incrementShareCount(id: number): Promise<void>;
}
